<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd"> 

    <bean id="propertyConfigurer" class="com.lenovo.priestsql.web.utils.ConfigUtil" />
    
	<bean id="commonDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" abstract="true">
	 	<property name="initialPoolSize" value="3" />
        <property name="minPoolSize" value="3" />
        <property name="maxPoolSize" value="20" />
        <property name="acquireIncrement" value="3" />
        <property name="maxIdleTime" value="60" />
        <property name="idleConnectionTestPeriod" value="60" />
        <property name="preferredTestQuery" value="select 1" />
        <property name="testConnectionOnCheckout" value="false" />
        <property name="testConnectionOnCheckin" value="false" />
        <property name="maxStatementsPerConnection" value="10" />
        <property name="numHelperThreads" value="3" />
        <property name="autoCommitOnClose" value="false" />
        <property name="checkoutTimeout" value="30000" />
	</bean> 
	
	
	<bean id="mainDataSource" parent="commonDataSource">
        <property name="driverClass" value="${datasource.main.driver}" />
        <property name="jdbcUrl" value="${datasource.main.url}" />
        <property name="properties">
    		<props>
    			<prop key="user">${datasource.main.username}</prop>
        		<prop key="password">${datasource.main.password}</prop>
    		</props>
    	</property> 
    </bean>
	
    
    <bean id="leapidDataSource" parent="commonDataSource">
        <property name="driverClass" value="${datasource.leapid.driver}" />
        <property name="jdbcUrl" value="${datasource.leapid.url}" />
        <property name="properties">
    		<props>
    			<prop key="user">${datasource.leapid.username}</prop>
        		<prop key="password">${datasource.leapid.password}</prop>
    		</props>
    	</property> 
    </bean>
    
    <!-- 动态数据源 -->
    <bean id="dynamicDataSource" class="com.lenovo.priestsql.web.dao.dataSource.DynamicDataSource">
    	<property name="targetDataSources">
    		<map key-type="java.lang.String">
    			<entry key="main" value-ref="mainDataSource"/>
    		</map>
    	</property>
    	<property name="defaultTargetDataSource" ref="mainDataSource" />
    </bean>
	
    
    <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDataSource" />
        <property name="configLocation" value="classpath:mybatis/Configuration.xml" />
        <!-- mapper配置路径 -->
        <property name="mapperLocations">
            <list>
                <value>classpath:mybatis/**/*-mapper.xml</value>
            </list>
        </property>
    </bean>

    <!-- 通过扫描的模式，所有的mapper都继承SqlMapper接口的接口， 这样一个bean就可以了 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lenovo.priestsql.web.dao,com.lenovo.priestsql.schedule.dao" />
        <property name="markerInterface" value="com.lenovo.priestsql.web.dao.mapper.Mapper" />
    </bean>
    
    <!-- 对数据源进行事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dynamicDataSource" >
	</bean>
		
    <!-- 如果没有设置transaction-manager的值，则spring以缺省默认的事务管理器来处理事务，默认事务管理器为第一个加载的事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager"  proxy-target-class="true"/>
    
</beans>